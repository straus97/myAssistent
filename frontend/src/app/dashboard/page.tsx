'use client';

import { useQuery } from '@tanstack/react-query';
import api from '@/lib/api';
import EquityChart from '@/components/EquityChart';
import MetricsCard from '@/components/MetricsCard';
import SignalsTable from '@/components/SignalsTable';

export default function Dashboard() {
  // Real-time data fetching
  const { data: equity, isLoading: equityLoading } = useQuery({
    queryKey: ['equity'],
    queryFn: () => api.getEquity(),
    refetchInterval: 10000, // 10 seconds
  });

  const { data: positions, isLoading: positionsLoading } = useQuery({
    queryKey: ['positions'],
    queryFn: () => api.getPositions(),
    refetchInterval: 10000,
  });

  const { data: signals, isLoading: signalsLoading } = useQuery({
    queryKey: ['signals'],
    queryFn: () => api.getRecentSignals(20),
    refetchInterval: 30000, // 30 seconds
  });

  const { data: modelHealth, isLoading: healthLoading } = useQuery({
    queryKey: ['modelHealth'],
    queryFn: () => api.getModelHealth(),
    refetchInterval: 60000, // 1 minute
  });

  // Mock equity history –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–≤ production –±—É–¥–µ—Ç –∏–∑ API)
  const equityHistory = [
    { timestamp: '2025-10-01', equity: 1000, cash: 1000, positions_value: 0 },
    { timestamp: '2025-10-05', equity: 995, cash: 800, positions_value: 195 },
    { timestamp: '2025-10-10', equity: 1001.6, cash: 900, positions_value: 101.6 },
  ];

  return (
    <main className="min-h-screen bg-gray-50 dark:bg-gray-900 p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <header className="mb-8">
          <h1 className="text-4xl font-bold text-gray-900 dark:text-white">
            –ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-2">
            –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –Ω–∞ –ò–ò ‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å ‚Ä¢ –í–µ—Ä—Å–∏—è 1.0
          </p>
        </header>

        {/* Key Metrics */}
        <section className="mb-8">
          <h2 className="text-2xl font-semibold mb-4 text-gray-800 dark:text-gray-200">
            üí∞ –ú–æ–π –ü–æ—Ä—Ç—Ñ–µ–ª—å
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <MetricsCard
              title="–û–±—â–∞—è –°—É–º–º–∞"
              value={equityLoading ? '...' : `$${equity?.data?.equity?.toFixed(2) || '0.00'}`}
              trend="up"
            />
            <MetricsCard
              title="–ù–∞–ª–∏—á–Ω—ã–µ"
              value={equityLoading ? '...' : `$${equity?.data?.cash?.toFixed(2) || '0.00'}`}
              trend="neutral"
            />
            <MetricsCard
              title="–ü–æ–∑–∏—Ü–∏–π –û—Ç–∫—Ä—ã—Ç–æ"
              value={positionsLoading ? '...' : positions?.data?.positions?.length || 0}
              subtitle={`–°—Ç–æ–∏–º–æ—Å—Ç—å: $${equity?.data?.positions_value?.toFixed(2) || '0.00'}`}
              trend="neutral"
            />
            <MetricsCard
              title="–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"
              value="+0.16%"
              subtitle="–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å: 0.77"
              trend="up"
            />
          </div>
        </section>

        {/* Equity Chart */}
        <section className="mb-8">
          <h2 className="text-2xl font-semibold mb-4 text-gray-800 dark:text-gray-200">
            üìà –ì—Ä–∞—Ñ–∏–∫ –ü—Ä–∏–±—ã–ª–∏
          </h2>
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
            <EquityChart data={equityHistory} height={300} />
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-2 text-center">
              –ó–µ–ª—ë–Ω–∞—è –ª–∏–Ω–∏—è ‚Äî –æ–±—â–∞—è —Å—É–º–º–∞ ‚Ä¢ –°–∏–Ω—è—è ‚Äî –Ω–∞–ª–∏—á–Ω—ã–µ ‚Ä¢ –û—Ä–∞–Ω–∂–µ–≤–∞—è ‚Äî —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π
            </p>
          </div>
        </section>

        {/* Positions Table */}
        <section className="mb-8">
          <h2 className="text-2xl font-semibold mb-4 text-gray-800 dark:text-gray-200">
            üíº –û—Ç–∫—Ä—ã—Ç—ã–µ –ü–æ–∑–∏—Ü–∏–∏
          </h2>
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
            {positionsLoading ? (
              <div className="p-6 text-center text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            ) : positions?.data?.positions && positions.data.positions.length > 0 ? (
              <table className="w-full">
                <thead className="bg-gray-50 dark:bg-gray-700">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      –ë–∏—Ä–∂–∞
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      –ú–æ–Ω–µ—Ç–∞
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      –¶–µ–Ω–∞ –ü–æ–∫—É–ø–∫–∏
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                      –¢–µ–∫—É—â–∞—è –°—Ç–æ–∏–º–æ—Å—Ç—å
                    </th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                  {positions.data.positions.map((pos: any, idx: number) => (
                    <tr key={idx}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                        {pos.exchange}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
                        {pos.symbol}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                        {pos.qty.toFixed(6)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                        ${pos.avg_price.toFixed(2)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                        ${(pos.qty * pos.avg_price).toFixed(2)}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : (
              <div className="p-6 text-center text-gray-500 dark:text-gray-400">
                –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
              </div>
            )}
          </div>
        </section>

        {/* Recent Signals */}
        <section className="mb-8">
          <h2 className="text-2xl font-semibold mb-4 text-gray-800 dark:text-gray-200">
            üîî –°–∏–≥–Ω–∞–ª—ã (–ß—Ç–æ –°–æ–≤–µ—Ç—É–µ—Ç –ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–∞—Ç—å)
          </h2>
          <SignalsTable 
            signals={signals?.data || []} 
            loading={signalsLoading} 
          />
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
            üí° –°–∏–≥–Ω–∞–ª—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥. BUY = –∫—É–ø–∏—Ç—å, SELL = –ø—Ä–æ–¥–∞—Ç—å, HOLD = –¥–µ—Ä–∂–∞—Ç—å.
          </p>
        </section>

        {/* Model Health */}
        <section>
          <h2 className="text-2xl font-semibold mb-4 text-gray-800 dark:text-gray-200">
            ü§ñ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ú–æ–¥–µ–ª–∏ –ò–ò
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {healthLoading ? (
              <div className="col-span-full p-6 text-center text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            ) : modelHealth?.data && modelHealth.data.length > 0 ? (
              modelHealth.data.map((model: any, idx: number) => (
                <div key={idx} className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
                  <div className="flex justify-between items-start mb-3">
                    <div>
                      <p className="text-sm font-medium text-gray-900 dark:text-white">
                        {model.symbol}
                      </p>
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        {model.timeframe} ‚Ä¢ Horizon: {model.horizon_steps}
                      </p>
                    </div>
                    <span
                      className={`px-2 py-1 rounded text-xs font-medium ${
                        model.fresh
                          ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                          : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
                      }`}
                    >
                      {model.fresh ? '‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–∞' : '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'}
                    </span>
                  </div>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-500 dark:text-gray-400">–¢–æ—á–Ω–æ—Å—Ç—å:</span>
                      <span className="font-medium text-gray-900 dark:text-white">
                        {model.auc ? `${(model.auc * 100).toFixed(1)}%` : '–ù/–î'}
                      </span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-500 dark:text-gray-400">–í–æ–∑—Ä–∞—Å—Ç:</span>
                      <span className="font-medium text-gray-900 dark:text-white">
                        {model.age_days?.toFixed(0) || '0'} –¥–Ω–µ–π
                      </span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-500 dark:text-gray-400">–ü–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:</span>
                      <span className="font-medium text-gray-900 dark:text-white">
                        {model.n_features || '–ù/–î'}
                      </span>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <div className="col-span-full p-6 text-center text-gray-500 dark:text-gray-400">
                –ú–æ–¥–µ–ª–∏ –Ω–µ –æ–±—É—á–µ–Ω—ã
              </div>
            )}
          </div>
        </section>
      </div>
    </main>
  );
}

