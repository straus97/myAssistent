---
alwaysApply: false
---

# Rule: Django (Web App & Admin)

**Scope:** server-rendered features, admin/backoffice, user & permission management.  
**Outcome:** secure, maintainable MVT apps using ORM, admin, forms, and templates.

## Key Principles
- Use built-ins first (auth, admin, forms, messages). Keep views thin.
- Business logic in models/managers/services; DRY via reusable apps.
- Follow PEP 8 + Django style; migrations are atomic and reviewed.

## Toolkit
- Django, DRF (for APIs), Celery + Redis (tasks), PostgreSQL, WhiteNoise/CDN (static).

## Patterns
- CBVs for complex views; FBVs for trivial endpoints.
- `select_related/prefetch_related` to avoid N+1; indexes for hot fields.
- Custom error pages; security headers; CSRF/XSS/SQLi protections enabled.

## Structure
```
core/  apps/  templates/  static/  config/settings/{base,dev,prod}.py
```

## Do
- Cache hot reads (Redis). Add health checks and admin actions.
## Don’t
- Write raw SQL unless profiled and justified.
# Rule: Django (Web App & Admin)

**Scope:** server-rendered features, admin/backoffice, user & permission management.  
**Outcome:** secure, maintainable MVT apps using ORM, admin, forms, and templates.

## Key Principles
- Use built-ins first (auth, admin, forms, messages). Keep views thin.
- Business logic in models/managers/services; DRY via reusable apps.
- Follow PEP 8 + Django style; migrations are atomic and reviewed.

## Toolkit
- Django, DRF (for APIs), Celery + Redis (tasks), PostgreSQL, WhiteNoise/CDN (static).

## Patterns
- CBVs for complex views; FBVs for trivial endpoints.
- `select_related/prefetch_related` to avoid N+1; indexes for hot fields.
- Custom error pages; security headers; CSRF/XSS/SQLi protections enabled.

## Structure
```
core/  apps/  templates/  static/  config/settings/{base,dev,prod}.py
```

## Do
- Cache hot reads (Redis). Add health checks and admin actions.
## Don’t
- Write raw SQL unless profiled and justified.
