"""
Simple Strategy API Endpoints

Endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ (RSI, EMA Crossover, Bollinger Bands)
"""

from fastapi import APIRouter, HTTPException
from typing import Dict, Any
from pydantic import BaseModel
import pandas as pd

from ..db import SessionLocal, Price
from ..simple_strategies import (
    rsi_mean_reversion_strategy,
    ema_crossover_strategy,
    bollinger_bands_strategy
)
from ..notify import send_telegram

router = APIRouter(prefix="/simple_strategy", tags=["Simple Strategy"])


class StrategyRequest(BaseModel):
    exchange: str = "bybit"
    symbol: str = "BTC/USDT"
    timeframe: str = "1h"
    strategy: str = "ema_crossover"  # "ema_crossover", "rsi", "bollinger"
    # EMA params
    ema_fast: int = 9
    ema_slow: int = 21
    # RSI params
    rsi_period: int = 14
    rsi_oversold: int = 30
    rsi_overbought: int = 70
    # Bollinger params
    bb_period: int = 20
    bb_std: float = 2.0


@router.post("/signal", summary="–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª –æ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
def get_simple_strategy_signal(req: StrategyRequest) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    
    Returns:
        - signal: "BUY", "SELL", "HOLD"
        - current_price: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        - strategy: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        - details: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    """
    db = SessionLocal()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ª—é–±–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
        prices_query = db.query(Price).filter(
            Price.exchange == req.exchange,
            Price.symbol == req.symbol,
            Price.timeframe == req.timeframe
        ).order_by(Price.ts.desc()).limit(100).all()
        
        if not prices_query:
            raise HTTPException(
                status_code=404,
                detail=f"No prices found for {req.exchange} {req.symbol} {req.timeframe}"
            )
        
        # Reverse (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ)
        prices_query = list(reversed(prices_query))
        
        # Convert to DataFrame
        df = pd.DataFrame([
            {
                "timestamp": pd.Timestamp(p.ts, unit='ms', tz='UTC'),
                "close": p.close,
                "open": p.open,
                "high": p.high,
                "low": p.low,
                "volume": p.volume
            }
            for p in prices_query
        ])
        
        df = df.set_index("timestamp")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        if req.strategy == "ema_crossover":
            signals = ema_crossover_strategy(df, fast_period=req.ema_fast, slow_period=req.ema_slow)
            strategy_name = f"EMA Crossover ({req.ema_fast}/{req.ema_slow})"
        elif req.strategy == "rsi":
            signals = rsi_mean_reversion_strategy(
                df, 
                rsi_period=req.rsi_period, 
                oversold=req.rsi_oversold, 
                overbought=req.rsi_overbought
            )
            strategy_name = f"RSI Mean-Reversion ({req.rsi_period})"
        elif req.strategy == "bollinger":
            signals = bollinger_bands_strategy(df, period=req.bb_period, num_std=req.bb_std)
            strategy_name = f"Bollinger Bands ({req.bb_period}, {req.bb_std}œÉ)"
        else:
            raise HTTPException(status_code=400, detail=f"Unknown strategy: {req.strategy}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
        latest_signal = int(signals.iloc[-1])
        current_price = float(df['close'].iloc[-1])
        timestamp = df.index[-1]
        
        signal_map = {1: "BUY", -1: "SELL", 0: "HOLD"}
        signal_str = signal_map.get(latest_signal, "HOLD")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ BUY
        if signal_str == "BUY":
            message = f"üü¢ –°–ò–ì–ù–ê–õ –ü–†–û–°–¢–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò\n"
            message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            message += f"üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}\n"
            message += f"üí∞ –ü–∞—Ä–∞: {req.symbol}\n"
            message += f"üíµ –¶–µ–Ω–∞: ${current_price:.4f}\n"
            message += f"‚è∞ –í—Ä–µ–º—è: {timestamp.strftime('%Y-%m-%d %H:%M UTC')}\n\n"
            message += f"üéØ –°–ò–ì–ù–ê–õ: {signal_str}\n\n"
            message += f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:\n"
            message += f"–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –Ω–∞ 10-20% –∫–∞–ø–∏—Ç–∞–ª–∞"
            
            send_telegram(message)
        
        return {
            "signal": signal_str,
            "signal_value": latest_signal,
            "current_price": current_price,
            "timestamp": str(timestamp),
            "exchange": req.exchange,
            "symbol": req.symbol,
            "timeframe": req.timeframe,
            "strategy": strategy_name,
            "details": {
                "bars_analyzed": len(df),
                "total_buy_signals": int((signals == 1).sum()),
                "total_sell_signals": int((signals == -1).sum()),
                "total_hold_signals": int((signals == 0).sum())
            }
        }
    
    finally:
        db.close()


@router.get("/test_ema", summary="–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ EMA Crossover")
def test_ema_crossover(
    exchange: str = "bybit",
    symbol: str = "BTC/USDT",
    timeframe: str = "1h"
) -> Dict[str, Any]:
    """
    –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç EMA Crossover —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    return get_simple_strategy_signal(
        StrategyRequest(
            exchange=exchange,
            symbol=symbol,
            timeframe=timeframe,
            strategy="ema_crossover",
            ema_fast=9,
            ema_slow=21
        )
    )

