#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/migrate_sqlite_to_postgres.py

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - SQLite –±–∞–∑–∞: assistant.db
    - PostgreSQL: –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ docker-compose up -d postgres
    - .env: DATABASE_URL=postgresql://myassistent:password@localhost:5432/myassistent
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
PROJECT_ROOT = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(PROJECT_ROOT))

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from tqdm import tqdm
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º
SQLITE_DB = PROJECT_ROOT / "assistant.db"
POSTGRES_URL = os.getenv(
    "POSTGRES_URL",
    "postgresql://myassistent:change_me_in_production@localhost:5432/myassistent"
)


def migrate_table(sqlite_conn, postgres_conn, table_name: str, batch_size: int = 1000):
    """
    –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL
    
    Args:
        sqlite_conn: SQLAlchemy connection –∫ SQLite
        postgres_conn: SQLAlchemy connection –∫ PostgreSQL
        table_name: –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
        batch_size: —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    """
    logger.info(f"üì¶ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    count_query = text(f"SELECT COUNT(*) FROM {table_name}")
    total_rows = sqlite_conn.execute(count_query).scalar()
    
    if total_rows == 0:
        logger.info(f"  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    logger.info(f"  üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {total_rows:,}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    columns_query = text(f"PRAGMA table_info({table_name})")
    columns = [row[1] for row in sqlite_conn.execute(columns_query).fetchall()]
    columns_str = ", ".join(columns)
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞–º–∏
    offset = 0
    migrated = 0
    
    with tqdm(total=total_rows, desc=f"  {table_name}", unit="rows") as pbar:
        while offset < total_rows:
            # –ß–∏—Ç–∞–µ–º –±–∞—Ç—á –∏–∑ SQLite
            select_query = text(f"SELECT {columns_str} FROM {table_name} LIMIT :limit OFFSET :offset")
            rows = sqlite_conn.execute(
                select_query,
                {"limit": batch_size, "offset": offset}
            ).fetchall()
            
            if not rows:
                break
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ PostgreSQL (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã)
            placeholders = ", ".join([f":{col}" for col in columns])
            insert_query = text(f"""
                INSERT INTO {table_name} ({columns_str})
                VALUES ({placeholders})
                ON CONFLICT DO NOTHING
            """)
            
            for row in rows:
                try:
                    row_dict = dict(zip(columns, row))
                    postgres_conn.execute(insert_query, row_dict)
                    migrated += 1
                except Exception as e:
                    logger.warning(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}")
                    continue
            
            postgres_conn.commit()
            offset += batch_size
            pbar.update(len(rows))
    
    logger.info(f"  [OK] –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated:,} —Å—Ç—Ä–æ–∫")


def migrate_all():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è SQLite –±–∞–∑—ã
    if not SQLITE_DB.exists():
        logger.error(f"‚ùå SQLite –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {SQLITE_DB}")
        sys.exit(1)
    
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è SQLite ‚Üí PostgreSQL")
    logger.info(f"üìÇ SQLite: {SQLITE_DB}")
    logger.info(f"üêò PostgreSQL: {POSTGRES_URL}")
    
    # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    sqlite_engine = create_engine(f"sqlite:///{SQLITE_DB}")
    postgres_engine = create_engine(POSTGRES_URL)
    
    sqlite_conn = sqlite_engine.connect()
    postgres_conn = postgres_engine.connect()
    
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º Alembic –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ PostgreSQL
        logger.info("üìù –ü—Ä–∏–º–µ–Ω—è–µ–º Alembic –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ PostgreSQL...")
        os.system("alembic upgrade head")
        
        # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑-–∑–∞ FK)
        tables = [
            "messages",
            "articles",
            "article_annotations",
            "prices",
            "model_runs",
            "signal_events",
            "signal_outcomes",
            "portfolio",
            "paper_positions",
            "paper_orders",
            "paper_trades",
            "equity_points",
        ]
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
        for table in tables:
            try:
                migrate_table(sqlite_conn, postgres_conn, table)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
                logger.info("‚è© –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ–π...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º sequences –¥–ª—è –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ (PostgreSQL)
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ sequences...")
        for table in tables:
            try:
                postgres_conn.execute(text(f"""
                    SELECT setval(
                        pg_get_serial_sequence('{table}', 'id'),
                        COALESCE((SELECT MAX(id) FROM {table}), 1)
                    )
                """))
                postgres_conn.commit()
            except Exception as e:
                logger.warning(f"  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table} –±–µ–∑ –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞: {e}")
        
        logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        for table in tables:
            try:
                count = postgres_conn.execute(text(f"SELECT COUNT(*) FROM {table}")).scalar()
                logger.info(f"  {table:25} {count:>10,} —Å—Ç—Ä–æ–∫")
            except Exception:
                pass
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        sqlite_conn.close()
        postgres_conn.close()
    
    logger.info("\n[SUCCESS] –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏—Ç–µ .env:")
    logger.info(f"   DATABASE_URL={POSTGRES_URL}")


if __name__ == "__main__":
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("[WARNING] –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –º–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –≤ PostgreSQL")
    print(f"   SQLite: {SQLITE_DB}")
    print(f"   PostgreSQL: {POSTGRES_URL}")
    print()
    
    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").strip().lower()
    if response != "yes":
        print("[CANCELLED] –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        sys.exit(0)
    
    migrate_all()

