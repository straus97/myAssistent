#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ RL –æ–±—É—á–µ–Ω–∏—è
"""

import sys
from pathlib import Path

# Add project root
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from src.db import SessionLocal
from src.features import build_dataset
from src.rl_agent import RLAgent

print("=" * 80)
print(" " * 25 + "–ü–†–û–í–ï–†–ö–ê RL –ú–û–î–ï–õ–ò")
print("=" * 80)
print()

# –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–µ–ª–∏
rl_models_dir = project_root / "artifacts" / "rl_models"
models = list(rl_models_dir.glob("ppo_*.zip"))

if not models:
    print("[!] RL –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ artifacts/rl_models/")
    print()
    print("–ó–∞–ø—É—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ:")
    print("  python scripts\\train_rl_ppo.py --timesteps 100000")
    sys.exit(1)

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
latest_model = max(models, key=lambda p: p.stat().st_mtime)

print(f"[OK] –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è RL –º–æ–¥–µ–ª—å:")
print(f"     {latest_model.name}")
print(f"     –†–∞–∑–º–µ—Ä: {latest_model.stat().st_size / 1024:.1f} KB")
print(f"     –î–∞—Ç–∞: {latest_model.stat().st_mtime}")
print()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
print("=" * 80)
print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –æ—Ü–µ–Ω–∫–∞...")
print("=" * 80)
print()

agent = RLAgent()

try:
    agent.load(str(latest_model))
    print(f"[OK] –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {latest_model.name}")
    print()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
    print("[*] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏...")
    db = SessionLocal()
    
    try:
        df, feature_list = build_dataset(
            db=db,
            exchange="bybit",
            symbol="BTC/USDT",
            timeframe="1h"
        )
        print(f"[OK] –î–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(df)} rows x {len(feature_list)} features")
        print()
    finally:
        db.close()
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    print("[*] –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
    results = agent.predict(
        df=df,
        initial_capital=1000.0,
        deterministic=True
    )
    
    metrics = results["metrics"]
    
    print()
    print("=" * 80)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ RL –ú–û–î–ï–õ–ò")
    print("=" * 80)
    print()
    
    print(f"Total Return:    {metrics['total_return']:.2%}")
    print(f"Sharpe Ratio:    {metrics['sharpe_ratio']:.4f}")
    print(f"Sortino Ratio:   {metrics['sortino_ratio']:.4f}")
    print(f"Max Drawdown:    {metrics['max_drawdown']:.2%}")
    print(f"Win Rate:        {metrics['win_rate']:.2%}")
    print(f"Profit Factor:   {metrics['profit_factor']:.2f}")
    print(f"Total Trades:    {metrics['total_trades']}")
    print()
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ü–µ–ª—è–º–∏
    print("=" * 80)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –° –¶–ï–õ–Ø–ú–ò")
    print("=" * 80)
    print()
    
    sharpe_goal = 1.0
    return_goal = 0.05
    
    print(f"Sharpe Ratio: {metrics['sharpe_ratio']:.4f} (—Ü–µ–ª—å: >{sharpe_goal})")
    if metrics['sharpe_ratio'] > sharpe_goal:
        print("  ‚úÖ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê!")
    else:
        print(f"  ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {sharpe_goal - metrics['sharpe_ratio']:.4f})")
    
    print()
    
    print(f"Total Return: {metrics['total_return']:.2%} (—Ü–µ–ª—å: >{return_goal:.0%})")
    if metrics['total_return'] > return_goal:
        print("  ‚úÖ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê!")
    else:
        print(f"  ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {(return_goal - metrics['total_return']) * 100:.1f}%)")
    
    print()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print("=" * 80)
    print("–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê")
    print("=" * 80)
    print()
    
    if metrics['sharpe_ratio'] > 1.5 and metrics['total_return'] > 0.10:
        print("[üèÜ] –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢!")
        print("     RL agent –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –æ–∂–∏–¥–∞–Ω–∏—è")
        print()
        print("–°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("  1. Deploy –≤ paper trading")
        print("  2. Monitor 7 –¥–Ω–µ–π")
        print("  3. –ó–∞–ø—É—Å–∫ –Ω–∞ production!")
    
    elif metrics['sharpe_ratio'] > 1.0 and metrics['total_return'] > 0.05:
        print("[‚úÖ] –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢!")
        print("     RL agent –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–µ–π")
        print()
        print("–°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("  1. Deploy –≤ paper trading")
        print("  2. Monitor 7 –¥–Ω–µ–π")
        print("  3. Fine-tune –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")
    
    elif metrics['sharpe_ratio'] > 0.5:
        print("[‚ö†Ô∏è] –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•")
        print("     RL agent —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–∏–∂–µ —Ü–µ–ª–∏")
        print()
        print("–°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("  1. –£–≤–µ–ª–∏—á–∏—Ç—å timesteps (100K ‚Üí 500K)")
        print("  2. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        print("  3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PHASE 3 (LightGBM, AUC 0.5129)")
    
    else:
        print("[‚ùå] –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
        print("     RL agent –Ω–µ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–µ–π")
        print()
        print("–°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("  1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PHASE 3 (LightGBM, AUC 0.5129)")
        print("  2. –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö (6-12 –º–µ—Å—è—Ü–µ–≤)")
        print("  3. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º (A2C, SAC)")
    
    print()
    print("=" * 80)
    
except Exception as e:
    print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
    print()
    print("–ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å.")

