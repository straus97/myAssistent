version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: myassistent_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: myassistent
      POSTGRES_USER: myassistent
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me_in_production}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myassistent -d myassistent"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - myassistent_network

  pgbouncer:
    image: edoburu/pgbouncer:1.21.0
    container_name: myassistent_pgbouncer
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://myassistent:${POSTGRES_PASSWORD:-change_me_in_production}@postgres:5432/myassistent
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 100
      DEFAULT_POOL_SIZE: 20
      MIN_POOL_SIZE: 5
      RESERVE_POOL_SIZE: 5
      RESERVE_POOL_TIMEOUT: 3
      MAX_DB_CONNECTIONS: 50
      SERVER_IDLE_TIMEOUT: 600
    ports:
      - "6432:5432"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - myassistent_network

  # Опционально: pgAdmin для визуального управления БД
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: myassistent_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@myassistent.local
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - myassistent_network
    profiles:
      - tools

  # MLflow Tracking Server
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.9.2
    container_name: myassistent_mlflow
    restart: unless-stopped
    command: >
      mlflow server
      --backend-store-uri postgresql://myassistent:${POSTGRES_PASSWORD:-change_me_in_production}@postgres:5432/mlflow
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0
      --port 5000
    ports:
      - "5000:5000"
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - myassistent_network
    environment:
      - MLFLOW_TRACKING_USERNAME=${MLFLOW_USERNAME:-admin}
      - MLFLOW_TRACKING_PASSWORD=${MLFLOW_PASSWORD:-admin}

  # Prometheus для сбора метрик
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: myassistent_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - myassistent_network

  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana:10.2.2
    container_name: myassistent_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=http://localhost:3001
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - myassistent_network

volumes:
  postgres_data:
    driver: local
  mlflow_artifacts:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  myassistent_network:
    driver: bridge

